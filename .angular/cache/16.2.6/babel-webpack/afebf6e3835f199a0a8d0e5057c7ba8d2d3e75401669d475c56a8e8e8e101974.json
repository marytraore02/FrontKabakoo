{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_services/auth/auth.service\";\nimport * as i2 from \"src/app/_services/auth/token-storage.service\";\nimport * as i3 from \"@angular/router\";\nexport class LoginComponent {\n  constructor(authService, tokenStorage, router, tokenStorageService) {\n    this.authService = authService;\n    this.tokenStorage = tokenStorage;\n    this.router = router;\n    this.tokenStorageService = tokenStorageService;\n    this.form = {\n      username: null,\n      password: null\n    };\n    this.isLoggedIn = false;\n    this.isLoginFailed = false;\n    this.errorMessage = '';\n    this.roles = [];\n    this.role = false;\n    this.showAdminBoard = false;\n    this.showUserBoard = false;\n  }\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n  onSubmit() {\n    const {\n      username,\n      password\n    } = this.form;\n    this.authService.login(username, password).subscribe({\n      next: data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        // On recupère le token de la personne connecter\n        this.isLoggedIn = !!this.tokenStorageService.getToken();\n        // On recupère le role de la personne connecter\n        this.role = this.tokenStorageService.getUser().roles;\n        this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n        this.showUserBoard = this.roles.includes('ROLE_USER');\n        // On vérifie, si le role user ou admin pour la redirection\n        // if (this.isLoggedIn) {\n        //   const user = this.tokenStorageService.getUser();\n        //   this.roles = user.roles;\n        //   this.role = user.roles;\n        //   this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n        //   this.showUserBoard = this.roles.includes('ROLE_USER');\n        //   this.username = user.username;\n        // }\n        this.reloadPage();\n        // if (this.showAdminBoard){\n        //   this.navigateAdmin();\n        //   this.reloadPage()\n        // } else {\n        //   this.navigateHome();\n        //   this.reloadPage()\n        // }\n        // this.roles = this.tokenStorage.getUser().roles;\n        // this.reloadPage();\n      },\n\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    });\n  }\n  // Redirection\n  navigateAdmin() {\n    this.router.navigateByUrl('');\n  }\n  // Redirection\n  navigateHome() {\n    this.router.navigateByUrl('/');\n  }\n  reloadPage() {\n    // window.location.reload();\n    this.navigateAdmin();\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.TokenStorageService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i2.TokenStorageService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 2,\n    vars: 0,\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"login works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["LoginComponent","constructor","authService","tokenStorage","router","tokenStorageService","form","username","password","isLoggedIn","isLoginFailed","errorMessage","roles","role","showAdminBoard","showUserBoard","ngOnInit","getToken","getUser","onSubmit","login","subscribe","next","data","saveToken","accessToken","saveUser","includes","reloadPage","error","err","message","navigateAdmin","navigateByUrl","navigateHome","_","i0","ɵɵdirectiveInject","i1","AuthService","i2","TokenStorageService","i3","Router","_2","selectors","decls","vars","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["/Users/marytraore/ANGULAR_PROJECTS/GestionRegionV2/src/app/Auth/login/login.component.ts","/Users/marytraore/ANGULAR_PROJECTS/GestionRegionV2/src/app/Auth/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/_services/auth/auth.service';\nimport { TokenStorageService } from 'src/app/_services/auth/token-storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  form: any = {\n    username: null,\n    password: null,\n  };\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n  role = false;\n  showAdminBoard = false;\n  showUserBoard = false;\n  username?: string;\n\n  constructor(\n    private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    private router: Router,\n    private tokenStorageService: TokenStorageService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n\n  onSubmit(): void {\n    const { username, password } = this.form;\n\n    this.authService.login(username, password).subscribe({\n      next: (data) => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n\n        // On recupère le token de la personne connecter\n        this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n        // On recupère le role de la personne connecter\n        this.role = this.tokenStorageService.getUser().roles;\n        this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n        this.showUserBoard = this.roles.includes('ROLE_USER');\n\n        // On vérifie, si le role user ou admin pour la redirection\n        // if (this.isLoggedIn) {\n        //   const user = this.tokenStorageService.getUser();\n        //   this.roles = user.roles;\n        //   this.role = user.roles;\n\n        //   this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n        //   this.showUserBoard = this.roles.includes('ROLE_USER');\n        //   this.username = user.username;\n        // }\n        this.reloadPage();\n\n        // if (this.showAdminBoard){\n        //   this.navigateAdmin();\n        //   this.reloadPage()\n        // } else {\n        //   this.navigateHome();\n        //   this.reloadPage()\n        // }\n\n        // this.roles = this.tokenStorage.getUser().roles;\n        // this.reloadPage();\n      },\n      error: (err) => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      },\n    });\n  }\n\n  // Redirection\n  navigateAdmin() {\n    this.router.navigateByUrl('');\n  }\n\n  // Redirection\n  navigateHome() {\n    this.router.navigateByUrl('/');\n  }\n\n  reloadPage(): void {\n    // window.location.reload();\n    this.navigateAdmin();\n  }\n}\n","<p>login works!</p>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}