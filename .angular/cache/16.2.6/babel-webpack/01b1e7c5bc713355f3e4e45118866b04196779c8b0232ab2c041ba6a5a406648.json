{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2';\nexport let DashboardPaysComponent = class DashboardPaysComponent {\n  constructor(paysService, router, tokenStorage, regionService) {\n    this.paysService = paysService;\n    this.router = router;\n    this.tokenStorage = tokenStorage;\n    this.regionService = regionService;\n    this.listepays = [];\n    this.reg = [{\n      \"nomPays\": this.nomPays,\n      \"descriptionPays\": this.descriptionPays,\n      \"superficiePays\": this.superficiePays\n    }];\n  }\n  ngOnInit() {\n    //==========Recuperation de user conecter=========\n    this.user = this.tokenStorage.getUser().id;\n    console.log(\"id user \" + this.user);\n    this.accessToken = this.tokenStorage.getUser().accessToken;\n    console.log(\"token du user \" + this.accessToken);\n    this.ListPays();\n  }\n  ListPays() {\n    this.paysService.listePays().subscribe(data => {\n      console.log(data);\n      this.listepays = data;\n    }, err => {\n      console.log(err);\n    });\n  }\n  //Liste de tout les regions\n  listeRegion() {\n    this.regionService.liste().subscribe(data => {\n      console.log(data);\n      this.listregions = data;\n    }, err => {\n      console.log(err);\n    });\n  }\n  //Recuperationn de l'image depuis la formulaire\n  recuperationImage(event) {\n    this.image = event.target[\"files\"][0];\n    console.log(this.image);\n  }\n  onCreate() {\n    this.paysService.Create(this.image, this.nomPays, this.descriptionPays, this.superficiePays, this.accessToken).subscribe(data => {\n      // this.toastr.success('Region creer', 'OK', {\n      //   timeOut: 3000, positionClass: 'toast-top-center'\n      // });\n      console.log(data);\n      this.popUp();\n      // this.router.navigate(['/dashboard/pays']);\n    }, err => {\n      // this.toastr.error(err.error.mensaje, 'Fail', {\n      //   timeOut: 3000,  positionClass: 'toast-top-center',\n      // });\n      // this.router.navigate(['/list']);\n    });\n  }\n  // METHODE DE POP UP INSCRIPTION\n  popUp() {\n    Swal.fire({\n      position: 'center',\n      // title: 'Géo-clinique',\n      text: 'Pays créer avec success!',\n      icon: 'success',\n      heightAuto: false,\n      showConfirmButton: true,\n      confirmButtonText: \"OK\",\n      confirmButtonColor: '#0857b5',\n      showDenyButton: false,\n      showCancelButton: false,\n      allowOutsideClick: false\n    }).then(result => {\n      if (result.isConfirmed) {\n        this.router.navigate(['/dashboard/pays']);\n        window.location.reload();\n      }\n    });\n  }\n};\nDashboardPaysComponent = __decorate([Component({\n  selector: 'app-dashboard-pays',\n  templateUrl: './dashboard-pays.component.html',\n  styleUrls: ['./dashboard-pays.component.scss']\n})], DashboardPaysComponent);","map":{"version":3,"names":["Component","Swal","DashboardPaysComponent","constructor","paysService","router","tokenStorage","regionService","listepays","reg","nomPays","descriptionPays","superficiePays","ngOnInit","user","getUser","id","console","log","accessToken","ListPays","listePays","subscribe","data","err","listeRegion","liste","listregions","recuperationImage","event","image","target","onCreate","Create","popUp","fire","position","text","icon","heightAuto","showConfirmButton","confirmButtonText","confirmButtonColor","showDenyButton","showCancelButton","allowOutsideClick","then","result","isConfirmed","navigate","window","location","reload","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/marytraore/ANGULAR_PROJECTS/GestionRegionV2/src/app/components/dashboard/dashboard-pays/dashboard-pays.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Pays } from 'src/app/Models/pays';\nimport { TokenStorageService } from 'src/app/_services/auth/token-storage.service';\nimport { PaysService } from 'src/app/_services/pays/pays.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-dashboard-pays',\n  templateUrl: './dashboard-pays.component.html',\n  styleUrls: ['./dashboard-pays.component.scss']\n})\nexport class DashboardPaysComponent implements OnInit{\n\n  listepays: Pays[] = [];\n  image: any;\n  nomPays!: any;\n  descriptionPays!: any;\n  superficiePays!: any;\n  accessToken:any;\n  user:any;\n\n\n  constructor(\n    private paysService: PaysService,\n    private router: Router,\n    private tokenStorage: TokenStorageService,\n    private regionService: RegionService,\n    ){}\n\n  ngOnInit(): void {\n    //==========Recuperation de user conecter=========\n    this.user = this.tokenStorage.getUser().id;\n    console.log(\"id user \"+this.user);\n\n    this.accessToken = this.tokenStorage.getUser().accessToken;\n    console.log(\"token du user \"+this.accessToken)\n\n    this.ListPays();\n  }\n\n  ListPays(): void {\n    this.paysService.listePays().subscribe(\n      data => {\n        console.log(data);\n        this.listepays = data;\n      },\n      err => {\n        console.log(err);\n      }\n    );\n  }\n\n      //Liste de tout les regions\n      listeRegion(): void {\n        this.regionService.liste().subscribe(\n          data => {\n            console.log(data);\n            this.listregions = data;\n          },\n          err => {\n            console.log(err);\n          }\n        );\n      }\n  \n    //Recuperationn de l'image depuis la formulaire\n    recuperationImage(event: any) {\n      this.image = event.target[\"files\"][0];\n      console.log(this.image)\n    }\n    reg =[{\n      \"nomPays\": this.nomPays,\n      \"descriptionPays\": this.descriptionPays,\n      \"superficiePays\": this.superficiePays\n    }]\n\n    onCreate() {\n      this.paysService.Create(this.image,this.nomPays,this.descriptionPays,this.superficiePays,this.accessToken).subscribe(\n        data => {\n          // this.toastr.success('Region creer', 'OK', {\n          //   timeOut: 3000, positionClass: 'toast-top-center'\n          // });\n          console.log(data);\n          this.popUp();\n          // this.router.navigate(['/dashboard/pays']);\n        },\n        err => {\n          // this.toastr.error(err.error.mensaje, 'Fail', {\n          //   timeOut: 3000,  positionClass: 'toast-top-center',\n          // });\n          // this.router.navigate(['/list']);\n        }\n      );\n    }\n\n  // METHODE DE POP UP INSCRIPTION\n  popUp() {\n    Swal.fire({\n      position:'center',\n      // title: 'Géo-clinique',\n      text: 'Pays créer avec success!',\n      icon:'success',\n      heightAuto: false,\n      showConfirmButton: true,\n      confirmButtonText: \"OK\",\n      confirmButtonColor: '#0857b5',\n      showDenyButton: false,\n      showCancelButton: false,\n      allowOutsideClick: false\n    }).then((result) => {\n      if (result.isConfirmed) {\n          this.router.navigate(['/dashboard/pays']);\n          window.location.reload();\n      }\n    })\n\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}