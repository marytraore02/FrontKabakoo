{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_services/auth/auth.service\";\nimport * as i2 from \"src/app/_services/auth/token-storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction LoginComponent_form_3_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Username is required! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_form_3_div_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_form_3_div_13_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Password must be at least 6 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_form_3_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, LoginComponent_form_3_div_13_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵtemplate(2, LoginComponent_form_3_div_13_div_2_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r4 = i0.ɵɵreference(12);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r4.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r4.errors[\"minlength\"]);\n  }\n}\nfunction LoginComponent_form_3_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Login failed: \", ctx_r6.errorMessage, \" \");\n  }\n}\nfunction LoginComponent_form_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 4, 5);\n    i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_form_3_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const _r1 = i0.ɵɵreference(1);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(_r1.form.valid && ctx_r9.onSubmit());\n    });\n    i0.ɵɵelementStart(2, \"div\", 6)(3, \"label\", 7);\n    i0.ɵɵtext(4, \"Username\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 8, 9);\n    i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_form_3_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.form.username = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, LoginComponent_form_3_div_7_Template, 2, 0, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 6)(9, \"label\", 11);\n    i0.ɵɵtext(10, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"input\", 12, 13);\n    i0.ɵɵlistener(\"ngModelChange\", function LoginComponent_form_3_Template_input_ngModelChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.form.password = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, LoginComponent_form_3_div_13_Template, 3, 2, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 6)(15, \"button\", 14);\n    i0.ɵɵtext(16, \" Login \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"div\", 6);\n    i0.ɵɵtemplate(18, LoginComponent_form_3_div_18_Template, 2, 1, \"div\", 10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const _r1 = i0.ɵɵreference(1);\n    const _r2 = i0.ɵɵreference(6);\n    const _r4 = i0.ɵɵreference(12);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.form.username);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", _r2.errors && _r1.submitted);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.form.password);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", _r4.errors && _r1.submitted);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", _r1.submitted && ctx_r0.isLoginFailed);\n  }\n}\nexport class LoginComponent {\n  constructor(authService, tokenStorage, router, tokenStorageService) {\n    this.authService = authService;\n    this.tokenStorage = tokenStorage;\n    this.router = router;\n    this.tokenStorageService = tokenStorageService;\n    this.form = {\n      username: null,\n      password: null\n    };\n    this.isLoggedIn = false;\n    this.isLoginFailed = false;\n    this.errorMessage = '';\n    this.roles = [];\n    this.role = false;\n    this.showAdminBoard = false;\n    this.showUserBoard = false;\n  }\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n  onSubmit() {\n    const {\n      username,\n      password\n    } = this.form;\n    this.authService.login(username, password).subscribe({\n      next: data => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        // On recupère le token de la personne connecter\n        this.isLoggedIn = !!this.tokenStorageService.getToken();\n        // On recupère le role de la personne connecter\n        this.role = this.tokenStorageService.getUser().roles;\n        this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n        this.showUserBoard = this.roles.includes('ROLE_USER');\n        // On vérifie, si le role user ou admin pour la redirection\n        // if (this.isLoggedIn) {\n        //   const user = this.tokenStorageService.getUser();\n        //   this.roles = user.roles;\n        //   this.role = user.roles;\n        //   this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n        //   this.showUserBoard = this.roles.includes('ROLE_USER');\n        //   this.username = user.username;\n        // }\n        this.navigateAdmin();\n        // if (this.showAdminBoard){\n        //   this.navigateAdmin();\n        //   this.reloadPage()\n        // } else {\n        //   this.navigateHome();\n        //   this.reloadPage()\n        // }\n        // this.roles = this.tokenStorage.getUser().roles;\n        // this.reloadPage();\n      },\n\n      error: err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    });\n  }\n  // Redirection\n  navigateAdmin() {\n    this.router.navigateByUrl('/accueil');\n  }\n  // Redirection\n  navigateHome() {\n    this.router.navigateByUrl('/');\n  }\n  reloadPage() {\n    // window.location.reload();\n    this.navigateAdmin();\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.TokenStorageService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i2.TokenStorageService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"col-md-12\"], [1, \"card\", \"card-container\"], [\"id\", \"profile-img\", \"src\", \"//ssl.gstatic.com/accounts/ui/avatar_2x.png\", 1, \"profile-img-card\"], [\"name\", \"form\", \"novalidate\", \"\", 3, \"ngSubmit\", 4, \"ngIf\"], [\"name\", \"form\", \"novalidate\", \"\", 3, \"ngSubmit\"], [\"f\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"username\"], [\"type\", \"text\", \"name\", \"username\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"username\", \"ngModel\"], [\"class\", \"alert alert-danger\", \"role\", \"alert\", 4, \"ngIf\"], [\"for\", \"password\"], [\"type\", \"password\", \"name\", \"password\", \"required\", \"\", \"minlength\", \"6\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"password\", \"ngModel\"], [1, \"btn\", \"btn-primary\", \"btn-block\"], [\"role\", \"alert\", 1, \"alert\", \"alert-danger\"], [4, \"ngIf\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"img\", 2);\n        i0.ɵɵtemplate(3, LoginComponent_form_3_Template, 19, 5, \"form\", 3);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoggedIn);\n      }\n    },\n    dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.MinLengthValidator, i5.NgModel, i5.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","LoginComponent_form_3_div_13_div_1_Template","LoginComponent_form_3_div_13_div_2_Template","ɵɵadvance","ɵɵproperty","_r4","errors","ɵɵtextInterpolate1","ctx_r6","errorMessage","ɵɵlistener","LoginComponent_form_3_Template_form_ngSubmit_0_listener","ɵɵrestoreView","_r10","_r1","ɵɵreference","ctx_r9","ɵɵnextContext","ɵɵresetView","form","valid","onSubmit","LoginComponent_form_3_Template_input_ngModelChange_5_listener","$event","ctx_r11","username","LoginComponent_form_3_div_7_Template","LoginComponent_form_3_Template_input_ngModelChange_11_listener","ctx_r12","password","LoginComponent_form_3_div_13_Template","LoginComponent_form_3_div_18_Template","ctx_r0","_r2","submitted","isLoginFailed","LoginComponent","constructor","authService","tokenStorage","router","tokenStorageService","isLoggedIn","roles","role","showAdminBoard","showUserBoard","ngOnInit","getToken","getUser","login","subscribe","next","data","saveToken","accessToken","saveUser","includes","navigateAdmin","error","err","message","navigateByUrl","navigateHome","reloadPage","_","ɵɵdirectiveInject","i1","AuthService","i2","TokenStorageService","i3","Router","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelement","LoginComponent_form_3_Template"],"sources":["/Users/marytraore/ANGULAR_PROJECTS/GestionRegionV2/src/app/Auth/login/login.component.ts","/Users/marytraore/ANGULAR_PROJECTS/GestionRegionV2/src/app/Auth/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/_services/auth/auth.service';\nimport { TokenStorageService } from 'src/app/_services/auth/token-storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  form: any = {\n    username: null,\n    password: null,\n  };\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n  role = false;\n  showAdminBoard = false;\n  showUserBoard = false;\n  username?: string;\n\n  constructor(\n    private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    private router: Router,\n    private tokenStorageService: TokenStorageService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n  }\n\n  onSubmit(): void {\n    const { username, password } = this.form;\n\n    this.authService.login(username, password).subscribe({\n      next: (data) => {\n        this.tokenStorage.saveToken(data.accessToken);\n        this.tokenStorage.saveUser(data);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n\n        // On recupère le token de la personne connecter\n        this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n        // On recupère le role de la personne connecter\n        this.role = this.tokenStorageService.getUser().roles;\n        this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n        this.showUserBoard = this.roles.includes('ROLE_USER');\n\n        // On vérifie, si le role user ou admin pour la redirection\n        // if (this.isLoggedIn) {\n        //   const user = this.tokenStorageService.getUser();\n        //   this.roles = user.roles;\n        //   this.role = user.roles;\n\n        //   this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n        //   this.showUserBoard = this.roles.includes('ROLE_USER');\n        //   this.username = user.username;\n        // }\n        this.navigateAdmin();\n\n        // if (this.showAdminBoard){\n        //   this.navigateAdmin();\n        //   this.reloadPage()\n        // } else {\n        //   this.navigateHome();\n        //   this.reloadPage()\n        // }\n\n        // this.roles = this.tokenStorage.getUser().roles;\n        // this.reloadPage();\n      },\n      error: (err) => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      },\n    });\n  }\n\n  // Redirection\n  navigateAdmin() {\n    this.router.navigateByUrl('/accueil');\n  }\n\n  // Redirection\n  navigateHome() {\n    this.router.navigateByUrl('/');\n  }\n\n  reloadPage(): void {\n    // window.location.reload();\n    this.navigateAdmin();\n  }\n}\n","<div class=\"col-md-12\">\n    <div class=\"card card-container\">\n      <img\n        id=\"profile-img\"\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n        class=\"profile-img-card\"\n      />\n      <form\n        *ngIf=\"!isLoggedIn\"\n        name=\"form\"\n        (ngSubmit)=\"f.form.valid && onSubmit()\"\n        #f=\"ngForm\"\n        novalidate\n      >\n        <div class=\"form-group\">\n          <label for=\"username\">Username</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            name=\"username\"\n            [(ngModel)]=\"form.username\"\n            required\n            #username=\"ngModel\"\n          />\n          <div\n            class=\"alert alert-danger\"\n            role=\"alert\"\n            *ngIf=\"username.errors && f.submitted\"\n          >\n            Username is required!\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">Password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            name=\"password\"\n            [(ngModel)]=\"form.password\"\n            required\n            minlength=\"6\"\n            #password=\"ngModel\"\n          />\n          <div\n            class=\"alert alert-danger\"\n            role=\"alert\"\n            *ngIf=\"password.errors && f.submitted\"\n          >\n            <div *ngIf=\"password.errors['required']\">Password is required</div>\n            <div *ngIf=\"password.errors['minlength']\">\n              Password must be at least 6 characters\n            </div>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <button class=\"btn btn-primary btn-block\">\n            Login\n          </button>\n        </div>\n        <div class=\"form-group\">\n          <div\n            class=\"alert alert-danger\"\n            role=\"alert\"\n            *ngIf=\"f.submitted && isLoginFailed\"\n          >\n            Login failed: {{ errorMessage }}\n          </div>\n        </div>\n      </form>\n  \n      <!-- <div class=\"alert alert-success\" *ngIf=\"isLoggedIn\">\n        <div *ngIf=\"showUserBoard\">\n          Logged in as <a href=\"/\">{{ roles }}</a>.\n        </div>\n      </div>\n\n      <div class=\"alert alert-success\" *ngIf=\"isLoggedIn\">\n        <div *ngIf=\"showUserBoard\">\n          Logged in as <a href=\"/\">{{ roles }}</a>.\n        </div>\n      </div> -->\n\n    </div>\n  </div>\n  \n  \n  \n  <!-- \n  <div class=\"log\">\n  \n  \n    <section class=\"form-container\" data-aos=\"zoom-in\" >\n      <img\n      id=\"profile-img\"\n      src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n      class=\"profile-img-card\"\n    />\n        <div class=\"row mt-5\">\n            <div class=\"col-md-4 mx-auto\">\n          <h1 class=\"heading\"> <span>Login</span> </h1>\n        <form  (ngSubmit)=\"onSubmit()\" novalidate #f=\"ngForm\" action=\"\">\n            \n            <div class=\"inputBox\">\n                <span for=\"username\">Username</span>\n                <input type=\"text\" placeholder=\"username\" id=\"username\" name=\"username\" required>\n            </div>\n            <div class=\"inputBox\">\n                <span for=\"password\">Password</span>\n                <input type=\"password\" placeholder=\"Password\" class=\"form-control\"  id=\"password\" name=\"password\" required>\n            </div>\n        <div class=\"register\">\n          <h2>Vous n'avez pas de compte? Creer en un ici <a href=\"/register\">creer</a> </h2>\n        </div>\n    \n        </form>\n      \n        <input type=\"submit\" value=\"Login\" class=\"btn\" [disabled]=\"!f.valid\">\n    \n        </div>\n    </div>\n    </section>  -->\n    <!-- \n    <div class=\"right-box\" data-aos=\"zoom-in\">\n      <span class=\"signinwith\"><h1 class=\"titre\">Sign in With <br> Social Networks</h1></span>\n    \n      <button class=\"social facebook\">Log in with Facebook</button>\n      <button class=\"social twitter\">Log in with twitter</button>\n      <button type=\"submit\" class=\"social google g-signin2\" data-onsuccess=\"onSignIn()\">Log in with gmail</button>\n    </div> -->\n  \n    \n    <!-- </div> -->\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}