{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RegionService {\n  constructor(http) {\n    this.http = http;\n    this.env = environment;\n  }\n  //Liste des region\n  liste() {\n    return this.http.get(`${this.env.api}` + `/region/read`);\n  }\n  //Creation d'une region\n  Creer(file, codeRegion, nomRegion, descriptionRegion, domaineActiviteRegion, superficie, langueMajoritaire, idPays, token) {\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${token}`\n    });\n    const dat = new FormData();\n    let reg = [{\n      \"codeRegion\": codeRegion,\n      \"nomRegion\": nomRegion,\n      \"descriptionRegion\": descriptionRegion,\n      \"domaineActiviteRegion\": domaineActiviteRegion,\n      \"superficie\": superficie,\n      \"langueMajoritaire\": langueMajoritaire\n    }];\n    dat.append('file', file);\n    console.log(\"Ce que j'envoi => \" + reg);\n    dat.append('data', JSON.stringify(reg).slice(1, JSON.stringify(reg).lastIndexOf(']')));\n    return this.http.post(`${this.env.api}/region/create/new/${idPays}`, dat);\n  }\n  static #_ = this.ɵfac = function RegionService_Factory(t) {\n    return new (t || RegionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RegionService,\n    factory: RegionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","RegionService","constructor","http","env","liste","get","api","Creer","file","codeRegion","nomRegion","descriptionRegion","domaineActiviteRegion","superficie","langueMajoritaire","idPays","token","headers","Authorization","dat","FormData","reg","append","console","log","JSON","stringify","slice","lastIndexOf","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/marytraore/ANGULAR_PROJECTS/GestionRegionV2/src/app/_services/regions/region.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Region } from 'src/app/Models/region';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegionService {\n  env=environment;\n\n  constructor(private http:HttpClient) { }\n\n  //Liste des region\n  liste(): Observable<Region[]> {\n    return this.http.get<Region[]>(`${this.env.api}` + `/region/read`);\n  }\n\n      \n  //Creation d'une region\n  Creer(file:any,codeRegion:any,nomRegion:any,descriptionRegion:any,domaineActiviteRegion:any,superficie:any,langueMajoritaire:any,idPays:number,token:any):Observable<any>{\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${token}`\n    });\n    const dat:FormData=new FormData();\n    let reg =[{\n      \"codeRegion\": codeRegion,\n      \"nomRegion\":nomRegion,\n      \"descriptionRegion\":descriptionRegion,\n      \"domaineActiviteRegion\":domaineActiviteRegion,\n      \"superficie\":superficie,\n      \"langueMajoritaire\":langueMajoritaire\n    }]\n    dat.append('file',file);\n    console.log(\"Ce que j'envoi => \"+reg)\n    dat.append('data', JSON.stringify(reg).slice(1,JSON.stringify(reg).lastIndexOf(']')));\n    return this.http.post(`${this.env.api}/region/create/new/${idPays}`, dat);\n  }\n\n\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAI9D,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,GAAG,GAACJ,WAAW;EAEwB;EAEvC;EACAK,KAAKA,CAAA;IACH,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,GAAG,CAACG,GAAG,EAAE,GAAG,cAAc,CAAC;EACpE;EAGA;EACAC,KAAKA,CAACC,IAAQ,EAACC,UAAc,EAACC,SAAa,EAACC,iBAAqB,EAACC,qBAAyB,EAACC,UAAc,EAACC,iBAAqB,EAACC,MAAa,EAACC,KAAS;IACtJ,MAAMC,OAAO,GAAG,IAAInB,WAAW,CAAC;MAC9BoB,aAAa,EAAE,UAAUF,KAAK;KAC/B,CAAC;IACF,MAAMG,GAAG,GAAU,IAAIC,QAAQ,EAAE;IACjC,IAAIC,GAAG,GAAE,CAAC;MACR,YAAY,EAAEZ,UAAU;MACxB,WAAW,EAACC,SAAS;MACrB,mBAAmB,EAACC,iBAAiB;MACrC,uBAAuB,EAACC,qBAAqB;MAC7C,YAAY,EAACC,UAAU;MACvB,mBAAmB,EAACC;KACrB,CAAC;IACFK,GAAG,CAACG,MAAM,CAAC,MAAM,EAACd,IAAI,CAAC;IACvBe,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAACH,GAAG,CAAC;IACrCF,GAAG,CAACG,MAAM,CAAC,MAAM,EAAEG,IAAI,CAACC,SAAS,CAACL,GAAG,CAAC,CAACM,KAAK,CAAC,CAAC,EAACF,IAAI,CAACC,SAAS,CAACL,GAAG,CAAC,CAACO,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IACrF,OAAO,IAAI,CAAC1B,IAAI,CAAC2B,IAAI,CAAC,GAAG,IAAI,CAAC1B,GAAG,CAACG,GAAG,sBAAsBS,MAAM,EAAE,EAAEI,GAAG,CAAC;EAC3E;EAAC,QAAAW,CAAA,G;qBA7BU9B,aAAa,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbnC,aAAa;IAAAoC,OAAA,EAAbpC,aAAa,CAAAqC,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}